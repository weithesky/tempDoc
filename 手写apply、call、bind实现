### 手写apply、call、bind

> 可以改变函数的作用域，实现改变内部this指向

```js
 let obj = {msg: 'hello'}
 var msg = 'we are the try'
 function test (v1, v2) {
	 console.log(this)
	 console.log(v1, v2)
 }
 
 // this => Window 
 test('小朋友', '你是否有很多问号')

 //this => obj
 test.call(obj, '小朋友', '你是否有很多问号')
```



#### 实现原理

> 通过在function原型链实现一个原型方法，需要指向obj时，动态的在obj里面添加这个函数，当使用完时删除这个方法。this指向的特性是谁是调用者就指向谁。所以当构建fuc.mycall(obj,'val'...)时**this就是要调用的fuc函数（this指向调用者）**，相当于调用obj.fuc()

- apply

```js
Function.prototype._apply = function (ctx, arg) { // fn(ctx, [arg1, ...])
    ctx = ctx || window // 当ctx为空时,默认指向window
    let key = Symbol() // 创建唯一键名,防止覆盖对象可能存在的同名属性
    ctx[key] = this // 添加函数属性
    let result = ctx[key](...arg) // 执行函数
    delete ctx[key] // 删除添加的函数属性
    return result
}
	
```



- call

```js
Function.prototype._apply = function (ctx, ...arg) { // fn(ctx, arg1, ...)
    ctx = ctx || window // 当ctx为空时,默认指向window
    let key = Symbol() // 创建唯一键名,防止覆盖对象可能存在的同名属性
    ctx[key] = this // 添加函数属性
    let result = ctx[key](...arg) // 执行函数
    delete ctx[key] // 删除添加的函数属性
    return result
}
	
```



- bind

> bind虽然接收参数形式跟call形似，但是相对来说区别很大，具有如下几个特点：
>
> - 函数调用，改变this
> - 返回值是一个绑定this环境的函数
> - 支持柯里化形式传参，形如fn(1)(2)

**什么是函数柯里化传参**：编译原理层面实现多参函数的一个技术。把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数。**只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数**。



简单实现一个add(1,2,3)柯里化为add(1)(2)(3)

```js
// 一般多参函数
function add (x, y, z) {
    return x + y + z
}

// 思路：每次返回一个函数，当参数收集全后再执行结果
function curriedAdd (x) {
  return function(y) {
      return function (z) {
          return x + y + z
      }
  }
}// curriedAdd(1)(2)(3) = 6

/*
**上面方法并不通用，当调用参数过多时这样实现并不优雅
**考虑使用递归的方式，每次把要使用的作用域保存到下一次调用
**funtion.length属性指明函数的形参个数。
*/
function curring (fn, ...args) {
    if (args.length >= fn.length) {
      // 当参数满足条件时直接执行
      return fn(...args)
    }
        
    return function (...args2) {
        // 递归执行
        return curring(fn, ...args, ...args2)
    }
}
/*实现如下调用：
**curring(add, 1)(2,3)  => 6
**curring(add, 1)(3)(2) => 6
**curring(add, 1,2,3)   =>6
*/
```

最后回到bind的实现

```js
// 柯里化实现，并不符合原生的样子
Function.prototype._bind = function (ctx, ...args) {
    let _this = this // 保存执行作用域，就是调用者函数
    if (args.length >= _this.length) {
        return _this.apply(ctx, [...args])
    }
    return function (...args2) {
        return _this._bind(ctx, ...args, ...args2)
    }
}

/*
**js原生bind:返回一个函数即：
**add.bind(obj,1,2,3)  =>add
**add.bind(obj,1,2,3)()=>返回结果
**add.bind(obj,1)(2,3) =>返回结果
**add.bind(obj,1,2)(3) =>返回结果
**add.bind(obj)(1,2,3) =>返回结果
**add.bind(obj)(1,2)(3)=>返回错误信息,这一串不是函数
**所以不需要递归调用去判断形参是否满足个数
**bind直接值result返回函数，result执行直接得到结果
*/
Function.prototype._bind = function (ctx, ...args) {
    let _this = this // 保存执行作用域，就是调用者函数
    return function (...args2) {
        return _this.apply(ctx, [...args, ...args2])
    }
}
```

